#include "surface.h"
#include <fstream>
#include <iostream>
#include <climits>
#include <string>
#include <cstring>

/*
example: 01010101
every bit flip means we are crossing the isosurface and we need a triangle to representing
the maximum trianges are the amount of bit flips
there are 5 maximim bit flips so there are 5 triangles

rolling the bits accounts for rotation
8 bit rolls sends us back to the original value

*/

Surface::Surface(){

}

Surface::~Surface(){
    
}

void Surface::load_surface_data(char *fileName){

    std::fstream file;
    file.open(fileName);
    std::string s;
    
    do{  // get surface dimentions and skip over comments
        string line, search;

        // read commentaries
        std::getline(file, line);

        search = "width";
        if (line.find(search) != string::npos)
            height = atoi(line.substr(line.find(search) + search.length()).c_str());

        search = "height";
        if (line.find(search) != string::npos)
            width = atoi(line.substr(line.find(search) + search.length()).c_str());
        
        search = "depth";
        if (line.find(search) != string::npos)
            depth = atoi(line.substr(line.find(search) + search.length()).c_str());
        s = line;
    }
    while(s[0] == '#');
    
    int xIN, yIN, zIN;
    /*
        Create the 3d array of the size spcified in the file
        Assume all points are outside a surface
    */
    points = new double**[width];
    for (int x = 0; x < width; x+=1){
        points[x] = new double*[height];
        for (int y = 0; y < height; y+=1){
            points[x][y] = new double[depth];
            for (int z = 0; z < depth; z+=1){
                points[x][y][z] = INT_MAX;
            }
        }
    }

    /*
        Load the surface data
    */  
   /*SEG FAUL{T*/int c = 0;
    for (int x = 0; x < width; x+=1){
        for (int y = 0; y < height; y+=1){
            for (int z = 0; z < depth; z+=1){
                c++;
                file >> s;
                xIN = std::stoi(s);
                file >> s;
                yIN = std::stoi(s);
                file >> s;
                zIN = std::stoi(s);
                file >> s;
               // std::cout << std::stof(s) << std::endl;
                if(xIN > width || yIN > height || zIN > depth){continue;} // if a point is greater than a specified dimention skip over it
//std::cout << xIN << " " << yIN << " " << zIN << " " << s << " " << c << std::endl;               

               points[xIN][yIN][zIN] = std::stod(s);
            }
        }
    }
  file.close();
}


void Surface::marching_cube(){    

    Cube cube;
    /*
    Iterate over the 3d matrix that holds the weight at each point
    */
    for(int i = 0; i < width-1; i++){
        for(int j = 0; j < height-1; j++){
            for(int k = 0; k < depth-1; k++){
                /*
                    Make a sample cube to analyze
                */
                cube.values[0] = points[i  ][j  ][k];     cube.verticies[0] = Point{i,  j , k};
                cube.values[1] = points[i+1][j  ][k];     cube.verticies[1] = Point{i+1,j,  k};
                cube.values[2] = points[i+1][j  ][k+1];   cube.verticies[2] = Point{i+1,j,  k+1};
                cube.values[3] = points[i  ][j  ][k+1];   cube.verticies[3] = Point{i,  j,  k+1};
                cube.values[4] = points[i  ][j+1][k];     cube.verticies[4] = Point{i , j+1,k};
                cube.values[5] = points[i+1][j+1][k];     cube.verticies[5] = Point{i+1,j+1,k};
                cube.values[6] = points[i+1][j+1][k+1];   cube.verticies[6] = Point{i+1,j+1,k+1};
                cube.values[7] = points[i  ][j+1][k+1];   cube.verticies[7] = Point{i,  j+1,k+1};   
                generate_triangles(cube);
            }
        }
    }
}

unsigned char Surface::get_index(double *vertValues){
  unsigned char index = 0;
  for(int i = 7; i >= 0; i--){
      vertValues[i] < 0 ? index = index << 1 : index = (index<<1)+1;
  }
  return index;
}

void Surface::generate_triangles(Cube cube){    
std::vector<std::vector<int> > triangleTable = {
/*0*/ {},
/*1*/ {0, 3, 8, },
/*2*/ {9, 1, 0, },
/*3*/ {1, 3, 9, 3, 8, 9, },
/*4*/ {8, 0, 3, },
/*5*/ {8, 0, 3, 11, 6, 7, },
/*6*/ {4, 0, 7, 0, 3, 7, },
/*7*/ {3, 2, 8, 2, 8, 10, 8, 9, 10, },
/*8*/ {3, 2, 11, },
/*9*/ {0, 2, 8, 2, 11, 8, },
/*10*/ {6, 10, 5, 4, 8, 7, },
/*11*/ {2, 1, 11, 1, 11, 9, 11, 8, 9, },
/*12*/ {3, 1, 11, 1, 10, 11, },
/*13*/ {1, 0, 10, 0, 10, 8, 10, 11, 8, },
/*14*/ {0, 3, 9, 3, 9, 11, 9, 10, 11, },
/*15*/ {8, 9, 10, 8, 10, 11, },
/*16*/ {8, 7, 4, },
/*17*/ {3, 7, 0, 7, 4, 0, },
/*18*/ {8, 7, 4, 9, 1, 0, },
/*19*/ {7, 11, 4, 11, 4, 2, 4, 0, 2, },
/*20*/ {8, 7, 4, 1, 10, 2, },
/*21*/ {3, 7, 0, 7, 4, 0, 1, 10, 2, },
/*22*/ {4, 0, 7, 0, 3, 7, 6, 10, 5, },
/*23*/ {4, 7, 3, 4, 3, 10, 4, 9, 10, 2, 3, 10, },
/*24*/ {3, 2, 11, 7, 4, 8, },
/*25*/ {11, 6, 3, 6, 3, 5, 3, 1, 5, },
/*26*/ {4, 7, 8, 0, 1, 9, 3, 2, 11, },
/*27*/ {4, 7, 11, 4, 2, 11, 4, 2, 9, 2, 1, 9, },
/*28*/ {3, 1, 11, 1, 10, 11, 7, 4, 8, },
/*29*/ {10, 2, 0, 10, 0, 7, 10, 5, 7, 8, 0, 7, },
/*30*/ {0, 3, 9, 3, 9, 11, 4, 7, 8, 9, 10, 11, },
/*31*/ {5, 6, 9, 6, 9, 11, 9, 8, 11, },
/*32*/ {4, 5, 9, },
/*33*/ {0, 3, 8, 4, 5, 9, },
/*34*/ {5, 1, 4, 1, 0, 4, },
/*35*/ {4, 8, 5, 8, 5, 3, 5, 1, 3, },
/*36*/ {7, 11, 6, 5, 9, 4, },
/*37*/ {8, 3, 0, 9, 5, 4, 1, 10, 2, },
/*38*/ {11, 3, 6, 3, 6, 0, 6, 4, 0, },
/*39*/ {8, 3, 2, 8, 10, 2, 8, 10, 4, 10, 5, 4, },
/*40*/ {4, 5, 9, 3, 2, 11, },
/*41*/ {0, 2, 8, 2, 11, 8, 4, 5, 9, },
/*42*/ {8, 11, 4, 11, 6, 4, 9, 1, 0, },
/*43*/ {4, 5, 1, 4, 1, 11, 4, 8, 11, 2, 1, 11, },
/*44*/ {10, 11, 1, 11, 3, 1, 9, 4, 5, },
/*45*/ {4, 5, 8, 5, 8, 10, 0, 1, 9, 8, 11, 10, },
/*46*/ {3, 0, 4, 3, 4, 10, 3, 11, 10, 5, 4, 10, },
/*47*/ {4, 5, 8, 5, 8, 10, 8, 11, 10, },
/*48*/ {7, 5, 8, 5, 9, 8, },
/*49*/ {6, 10, 7, 10, 7, 1, 7, 3, 1, },
/*50*/ {5, 9, 6, 9, 6, 0, 6, 2, 0, },
/*51*/ {7, 5, 1, 7, 1, 3, },
/*52*/ {9, 8, 5, 8, 7, 5, 10, 2, 1, },
/*53*/ {6, 10, 7, 10, 7, 1, 4, 9, 5, 7, 3, 1, },
/*54*/ {9, 1, 3, 9, 3, 6, 9, 4, 6, 11, 3, 6, },
/*55*/ {1, 10, 0, 10, 0, 6, 0, 4, 6, },
/*56*/ {7, 5, 8, 5, 9, 8, 3, 2, 11, },
/*57*/ {9, 5, 7, 9, 7, 2, 9, 0, 2, 11, 7, 2, },
/*58*/ {5, 9, 6, 9, 6, 0, 7, 8, 4, 6, 2, 0, },
/*59*/ {2, 11, 1, 11, 1, 7, 1, 5, 7, },
/*60*/ {8, 7, 9, 7, 9, 5, 3, 11, 1, 11, 1, 10, },
/*61*/ {5, 7, 10, 7, 11, 10, 1, 0, 9, },
/*62*/ {8, 9, 3, 9, 1, 3, 11, 6, 7, },
/*63*/ {5, 7, 10, 7, 11, 10, },
/*64*/ {7, 4, 8, },
/*65*/ {0, 3, 8, 5, 6, 10, },
/*66*/ {7, 4, 8, 3, 2, 11, },
/*67*/ {1, 3, 9, 3, 8, 9, 5, 6, 10, },
/*68*/ {7, 3, 6, 3, 2, 6, },
/*69*/ {7, 3, 6, 3, 2, 6, 5, 9, 4, },
/*70*/ {10, 2, 5, 2, 5, 3, 5, 7, 3, },
/*71*/ {1, 0, 4, 1, 4, 11, 1, 10, 11, 7, 4, 11, },
/*72*/ {10, 5, 6, 11, 3, 2, },
/*73*/ {0, 4, 1, 4, 5, 1, 2, 11, 3, },
/*74*/ {6, 5, 10, 2, 3, 11, 1, 0, 9, },
/*75*/ {7, 4, 11, 4, 11, 9, 3, 0, 8, 11, 10, 9, },
/*76*/ {3, 8, 2, 8, 2, 4, 2, 6, 4, },
/*77*/ {0, 1, 5, 0, 5, 11, 0, 8, 11, 6, 5, 11, },
/*78*/ {9, 5, 6, 9, 11, 6, 9, 11, 0, 11, 3, 0, },
/*79*/ {7, 4, 11, 4, 11, 9, 11, 10, 9, },
/*80*/ {4, 8, 7, 6, 10, 5, },
/*81*/ {10, 9, 6, 9, 4, 6, 11, 3, 2, },
/*82*/ {0, 1, 9, 4, 7, 8, 5, 6, 10, },
/*83*/ {7, 11, 4, 11, 4, 2, 5, 10, 6, 4, 0, 2, },
/*84*/ {9, 10, 0, 10, 2, 0, 8, 7, 4, },
/*85*/ {0, 3, 4, 3, 4, 7, 1, 2, 5, 2, 5, 6, },
/*86*/ {8, 7, 0, 7, 0, 6, 9, 5, 4, 0, 2, 6, },
/*87*/ {1, 5, 2, 5, 6, 2, 3, 8, 0, },
/*88*/ {2, 3, 11, 6, 5, 10, 7, 4, 8, },
/*89*/ {11, 6, 3, 6, 3, 5, 8, 4, 7, 3, 1, 5, },
/*90*/ {0, 3, 8, 1, 2, 10, 4, 5, 9, 6, 7, 11, },
/*91*/ {10, 1, 2, 11, 7, 6, 3, 8, 0, },
/*92*/ {4, 8, 5, 8, 5, 3, 6, 11, 7, 5, 1, 3, },
/*93*/ {5, 1, 4, 1, 0, 4, 7, 11, 6, },
/*94*/ {9, 5, 4, 8, 3, 0, 7, 11, 6, },
/*95*/ {11, 6, 7, 8, 0, 3, },
/*96*/ {6, 4, 11, 4, 8, 11, },
/*97*/ {6, 4, 11, 4, 8, 11, 2, 1, 10, },
/*98*/ {8, 0, 7, 0, 7, 1, 7, 5, 1, },
/*99*/ {8, 3, 1, 8, 1, 6, 8, 4, 6, 10, 1, 6, },
/*100*/ {9, 1, 4, 1, 4, 2, 4, 6, 2, },
/*101*/ {9, 1, 4, 1, 4, 2, 8, 3, 0, 4, 6, 2, },
/*102*/ {4, 0, 2, 4, 2, 6, },
/*103*/ {9, 4, 1, 4, 1, 7, 1, 3, 7, },
/*104*/ {6, 2, 5, 2, 1, 5, 4, 8, 7, },
/*105*/ {4, 8, 6, 8, 6, 11, 9, 0, 10, 0, 10, 2, },
/*106*/ {8, 0, 7, 0, 7, 1, 11, 2, 3, 7, 5, 1, },
/*107*/ {4, 6, 9, 6, 10, 9, 0, 3, 8, },
/*108*/ {8, 7, 5, 8, 5, 2, 8, 0, 2, 10, 5, 2, },
/*109*/ {2, 6, 3, 6, 7, 3, 0, 9, 1, },
/*110*/ {10, 5, 2, 5, 2, 4, 2, 0, 4, },
/*111*/ {2, 6, 3, 6, 7, 3, },
/*112*/ {6, 7, 10, 7, 10, 8, 10, 9, 8, },
/*113*/ {0, 3, 7, 0, 7, 10, 0, 9, 10, 6, 7, 10, },
/*114*/ {0, 1, 10, 0, 6, 10, 0, 6, 8, 6, 7, 8, },
/*115*/ {0, 9, 3, 9, 3, 5, 3, 7, 5, },
/*116*/ {11, 2, 0, 11, 0, 5, 11, 7, 5, 9, 0, 5, },
/*117*/ {11, 8, 2, 8, 0, 2, 10, 5, 6, },
/*118*/ {8, 7, 0, 7, 0, 6, 0, 2, 6, },
/*119*/ {1, 5, 2, 5, 6, 2, },
/*120*/ {3, 2, 8, 2, 8, 10, 7, 6, 11, 8, 9, 10, },
/*121*/ {2, 0, 10, 0, 9, 10, 6, 7, 11, },
/*122*/ {11, 7, 6, 10, 1, 2, 5, 9, 4, },
/*123*/ {2, 1, 10, 6, 7, 11, },
/*124*/ {11, 10, 7, 10, 5, 7, 8, 0, 3, },
/*125*/ {9, 1, 0, 7, 11, 6, },
/*126*/ {5, 9, 4, 7, 11, 6, },
/*127*/ {11, 6, 7, },
/*128*/ {11, 6, 7, },
/*129*/ {5, 9, 4, 7, 11, 6, },
/*130*/ {9, 1, 0, 7, 11, 6, },
/*131*/ {11, 10, 7, 10, 5, 7, 8, 0, 3, },
/*132*/ {2, 1, 10, 6, 7, 11, },
/*133*/ {11, 7, 6, 10, 1, 2, 5, 9, 4, },
/*134*/ {2, 0, 10, 0, 9, 10, 6, 7, 11, },
/*135*/ {3, 2, 8, 2, 8, 10, 7, 6, 11, 8, 9, 10, },
/*136*/ {1, 5, 2, 5, 6, 2, },
/*137*/ {8, 7, 0, 7, 0, 6, 0, 2, 6, },
/*138*/ {11, 8, 2, 8, 0, 2, 10, 5, 6, },
/*139*/ {11, 2, 0, 11, 0, 5, 11, 7, 5, 9, 0, 5, },
/*140*/ {0, 9, 3, 9, 3, 5, 3, 7, 5, },
/*141*/ {0, 1, 10, 0, 6, 10, 0, 6, 8, 6, 7, 8, },
/*142*/ {0, 3, 7, 0, 7, 10, 0, 9, 10, 6, 7, 10, },
/*143*/ {6, 7, 10, 7, 10, 8, 10, 9, 8, },
/*144*/ {2, 6, 3, 6, 7, 3, },
/*145*/ {10, 5, 2, 5, 2, 4, 2, 0, 4, },
/*146*/ {2, 6, 3, 6, 7, 3, 0, 9, 1, },
/*147*/ {8, 7, 5, 8, 5, 2, 8, 0, 2, 10, 5, 2, },
/*148*/ {4, 6, 9, 6, 10, 9, 0, 3, 8, },
/*149*/ {8, 0, 7, 0, 7, 1, 11, 2, 3, 7, 5, 1, },
/*150*/ {4, 8, 6, 8, 6, 11, 9, 0, 10, 0, 10, 2, },
/*151*/ {6, 2, 5, 2, 1, 5, 4, 8, 7, },
/*152*/ {9, 4, 1, 4, 1, 7, 1, 3, 7, },
/*153*/ {4, 0, 2, 4, 2, 6, },
/*154*/ {9, 1, 4, 1, 4, 2, 8, 3, 0, 4, 6, 2, },
/*155*/ {9, 1, 4, 1, 4, 2, 4, 6, 2, },
/*156*/ {8, 3, 1, 8, 1, 6, 8, 4, 6, 10, 1, 6, },
/*157*/ {8, 0, 7, 0, 7, 1, 7, 5, 1, },
/*158*/ {6, 4, 11, 4, 8, 11, 2, 1, 10, },
/*159*/ {6, 4, 11, 4, 8, 11, },
/*160*/ {11, 6, 7, 8, 0, 3, },
/*161*/ {9, 5, 4, 8, 3, 0, 7, 11, 6, },
/*162*/ {5, 1, 4, 1, 0, 4, 7, 11, 6, },
/*163*/ {4, 8, 5, 8, 5, 3, 6, 11, 7, 5, 1, 3, },
/*164*/ {10, 1, 2, 11, 7, 6, 3, 8, 0, },
/*165*/ {0, 3, 8, 1, 2, 10, 4, 5, 9, 6, 7, 11, },
/*166*/ {11, 6, 3, 6, 3, 5, 8, 4, 7, 3, 1, 5, },
/*167*/ {2, 3, 11, 6, 5, 10, 7, 4, 8, },
/*168*/ {1, 5, 2, 5, 6, 2, 3, 8, 0, },
/*169*/ {8, 7, 0, 7, 0, 6, 9, 5, 4, 0, 2, 6, },
/*170*/ {0, 3, 4, 3, 4, 7, 1, 2, 5, 2, 5, 6, },
/*171*/ {9, 10, 0, 10, 2, 0, 8, 7, 4, },
/*172*/ {7, 11, 4, 11, 4, 2, 5, 10, 6, 4, 0, 2, },
/*173*/ {0, 1, 9, 4, 7, 8, 5, 6, 10, },
/*174*/ {10, 9, 6, 9, 4, 6, 11, 3, 2, },
/*175*/ {4, 8, 7, 6, 10, 5, },
/*176*/ {7, 4, 11, 4, 11, 9, 11, 10, 9, },
/*177*/ {9, 5, 6, 9, 11, 6, 9, 11, 0, 11, 3, 0, },
/*178*/ {0, 1, 5, 0, 5, 11, 0, 8, 11, 6, 5, 11, },
/*179*/ {3, 8, 2, 8, 2, 4, 2, 6, 4, },
/*180*/ {7, 4, 11, 4, 11, 9, 3, 0, 8, 11, 10, 9, },
/*181*/ {6, 5, 10, 2, 3, 11, 1, 0, 9, },
/*182*/ {0, 4, 1, 4, 5, 1, 2, 11, 3, },
/*183*/ {10, 5, 6, 11, 3, 2, },
/*184*/ {1, 0, 4, 1, 4, 11, 1, 10, 11, 7, 4, 11, },
/*185*/ {10, 2, 5, 2, 5, 3, 5, 7, 3, },
/*186*/ {7, 3, 6, 3, 2, 6, 5, 9, 4, },
/*187*/ {7, 3, 6, 3, 2, 6, },
/*188*/ {1, 3, 9, 3, 8, 9, 5, 6, 10, },
/*189*/ {7, 4, 8, 3, 2, 11, },
/*190*/ {0, 3, 8, 5, 6, 10, },
/*191*/ {7, 4, 8, },
/*192*/ {5, 7, 10, 7, 11, 10, },
/*193*/ {8, 9, 3, 9, 1, 3, 11, 6, 7, },
/*194*/ {5, 7, 10, 7, 11, 10, 1, 0, 9, },
/*195*/ {8, 7, 9, 7, 9, 5, 3, 11, 1, 11, 1, 10, },
/*196*/ {2, 11, 1, 11, 1, 7, 1, 5, 7, },
/*197*/ {5, 9, 6, 9, 6, 0, 7, 8, 4, 6, 2, 0, },
/*198*/ {9, 5, 7, 9, 7, 2, 9, 0, 2, 11, 7, 2, },
/*199*/ {7, 5, 8, 5, 9, 8, 3, 2, 11, },
/*200*/ {1, 10, 0, 10, 0, 6, 0, 4, 6, },
/*201*/ {9, 1, 3, 9, 3, 6, 9, 4, 6, 11, 3, 6, },
/*202*/ {6, 10, 7, 10, 7, 1, 4, 9, 5, 7, 3, 1, },
/*203*/ {9, 8, 5, 8, 7, 5, 10, 2, 1, },
/*204*/ {7, 5, 1, 7, 1, 3, },
/*205*/ {5, 9, 6, 9, 6, 0, 6, 2, 0, },
/*206*/ {6, 10, 7, 10, 7, 1, 7, 3, 1, },
/*207*/ {7, 5, 8, 5, 9, 8, },
/*208*/ {4, 5, 8, 5, 8, 10, 8, 11, 10, },
/*209*/ {3, 0, 4, 3, 4, 10, 3, 11, 10, 5, 4, 10, },
/*210*/ {4, 5, 8, 5, 8, 10, 0, 1, 9, 8, 11, 10, },
/*211*/ {10, 11, 1, 11, 3, 1, 9, 4, 5, },
/*212*/ {4, 5, 1, 4, 1, 11, 4, 8, 11, 2, 1, 11, },
/*213*/ {8, 11, 4, 11, 6, 4, 9, 1, 0, },
/*214*/ {0, 2, 8, 2, 11, 8, 4, 5, 9, },
/*215*/ {4, 5, 9, 3, 2, 11, },
/*216*/ {8, 3, 2, 8, 10, 2, 8, 10, 4, 10, 5, 4, },
/*217*/ {11, 3, 6, 3, 6, 0, 6, 4, 0, },
/*218*/ {8, 3, 0, 9, 5, 4, 1, 10, 2, },
/*219*/ {7, 11, 6, 5, 9, 4, },
/*220*/ {4, 8, 5, 8, 5, 3, 5, 1, 3, },
/*221*/ {5, 1, 4, 1, 0, 4, },
/*222*/ {0, 3, 8, 4, 5, 9, },
/*223*/ {4, 5, 9, },
/*224*/ {5, 6, 9, 6, 9, 11, 9, 8, 11, },
/*225*/ {0, 3, 9, 3, 9, 11, 4, 7, 8, 9, 10, 11, },
/*226*/ {10, 2, 0, 10, 0, 7, 10, 5, 7, 8, 0, 7, },
/*227*/ {3, 1, 11, 1, 10, 11, 7, 4, 8, },
/*228*/ {4, 7, 11, 4, 2, 11, 4, 2, 9, 2, 1, 9, },
/*229*/ {4, 7, 8, 0, 1, 9, 3, 2, 11, },
/*230*/ {11, 6, 3, 6, 3, 5, 3, 1, 5, },
/*231*/ {3, 2, 11, 7, 4, 8, },
/*232*/ {4, 7, 3, 4, 3, 10, 4, 9, 10, 2, 3, 10, },
/*233*/ {4, 0, 7, 0, 3, 7, 6, 10, 5, },
/*234*/ {3, 7, 0, 7, 4, 0, 1, 10, 2, },
/*235*/ {8, 7, 4, 1, 10, 2, },
/*236*/ {7, 11, 4, 11, 4, 2, 4, 0, 2, },
/*237*/ {8, 7, 4, 9, 1, 0, },
/*238*/ {3, 7, 0, 7, 4, 0, },
/*239*/ {8, 7, 4, },
/*240*/ {8, 9, 10, 8, 10, 11, },
/*241*/ {0, 3, 9, 3, 9, 11, 9, 10, 11, },
/*242*/ {1, 0, 10, 0, 10, 8, 10, 11, 8, },
/*243*/ {3, 1, 11, 1, 10, 11, },
/*244*/ {2, 1, 11, 1, 11, 9, 11, 8, 9, },
/*245*/ {6, 10, 5, 4, 8, 7, },
/*246*/ {0, 2, 8, 2, 11, 8, },
/*247*/ {3, 2, 11, },
/*248*/ {3, 2, 8, 2, 8, 10, 8, 9, 10, },
/*249*/ {4, 0, 7, 0, 3, 7, },
/*250*/ {8, 0, 3, 11, 6, 7, },
/*251*/ {8, 0, 3, },
/*252*/ {1, 3, 9, 3, 8, 9, },
/*253*/ {9, 1, 0, },
/*254*/ {0, 3, 8, },
/*255*/ {},
};
  
  
  
   unsigned char index; // holds the case of the cube
    // get the index of of the cube from a look up table
    index = get_index(cube.values);
    if(index == 0 ) { return;} 
        
if(index == 3 || index == 6 || index == 12 || index == 17 ||index == 34 ||index == 48 ||
index == 63 ||index == 68 ||index == 96){std::cout << (int)index << std::endl;}

    Point edgePoints[12];
    int edgeList = edgeTable[index];
    for(int i = 0; i < 12; i++){
        std::pair<int,int> edge2Verts = edgeToVertex(edgeList&(1<<i));
        if(edge2Verts.first == -1){continue;}
        edgePoints[i] = interpolate(cube.verticies[edge2Verts.first],cube.verticies[edge2Verts.second],cube.values[edge2Verts.first],cube.values[edge2Verts.second]);
    }

    for(int edge = 0; edge < triangleTable[index].size(); edge+=3){
        Triangle t;
        t.p[0] = edgePoints[triangleTable[index][edge]];
        t.p[1] = edgePoints[triangleTable[index][edge+1]];
        t.p[2] = edgePoints[triangleTable[index][edge+2]];
        triangles.push_back(t);
    }

}
void Surface::render_surface(){
  for(int i = 0; i < triangles.size(); i++){
    glColor3f(0.560784   ,0.560784   ,0.737255);
    glBegin(GL_TRIANGLES);
    glVertex3f(triangles[i].p[0].x,triangles[i].p[0].y,triangles[i].p[0].z);
    glVertex3f(triangles[i].p[1].x,triangles[i].p[1].y,triangles[i].p[1].z);
    glVertex3f(triangles[i].p[2].x,triangles[i].p[2].y,triangles[i].p[2].z);
    glEnd();

    glColor3f(1, 0, 0.25);
    glBegin(GL_LINES);
    glVertex3f(triangles[i].p[0].x,triangles[i].p[0].y,triangles[i].p[0].z);
    glVertex3f(triangles[i].p[1].x,triangles[i].p[1].y,triangles[i].p[1].z);

    glVertex3f(triangles[i].p[1].x,triangles[i].p[1].y,triangles[i].p[1].z);
    glVertex3f(triangles[i].p[2].x,triangles[i].p[2].y,triangles[i].p[2].z);

    glVertex3f(triangles[i].p[0].x,triangles[i].p[0].y,triangles[i].p[0].z);
    glVertex3f(triangles[i].p[2].x,triangles[i].p[2].y,triangles[i].p[2].z);
    glEnd();

  }
}