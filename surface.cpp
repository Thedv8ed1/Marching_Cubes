#include "surface.h"
#include <fstream>
#include <iostream>
#include <climits>
#include <string>
#include <cstring>

/*
example: 01010101
every bit flip means we are crossing the isosurface and we need a triangle to representing
the maximum trianges are the amount of bit flips
there are 5 maximim bit flips so there are 5 triangles

rolling the bits accounts for rotation
8 bit rolls sends us back to the original value

*/

Surface::Surface(){

}

Surface::~Surface(){
    
}

void Surface::load_surface_data(char *fileName){

    std::fstream file;
    file.open(fileName);
    std::string s;
    
    do{  // get surface dimentions and skip over comments
        string line, search;

        // read commentaries
        std::getline(file, line);

        search = "width";
        if (line.find(search) != string::npos)
            height = atoi(line.substr(line.find(search) + search.length()).c_str());

        search = "height";
        if (line.find(search) != string::npos)
            width = atoi(line.substr(line.find(search) + search.length()).c_str());
        
        search = "depth";
        if (line.find(search) != string::npos)
            depth = atoi(line.substr(line.find(search) + search.length()).c_str());
        s = line;
    }
    while(s[0] == '#');
    
    int xIN, yIN, zIN;
    /*
        Create the 3d array of the size spcified in the file
        Assume all points are outside a surface
    */
    points = new double**[width];
    for (int x = 0; x < width; x+=1){
        points[x] = new double*[height];
        for (int y = 0; y < height; y+=1){
            points[x][y] = new double[depth];
            for (int z = 0; z < depth; z+=1){
                points[x][y][z] = INT_MAX;
            }
        }
    }

    /*
        Load the surface data
    */  
    for (int x = 0; x < width; x+=1){
        for (int y = 0; y < height; y+=1){
            for (int z = 0; z < depth; z+=1){
                file >> s;
                xIN = std::stoi(s);
                file >> s;
                yIN = std::stoi(s);
                file >> s;
                zIN = std::stoi(s);
                file >> s;
                if(xIN > width || yIN > height || zIN > depth){continue;} // if a point is greater than a specified dimention skip over it
                points[xIN][yIN][zIN] = std::stof(s);               
            }
        }
    }
  file.close();

  std::fstream f2;
  f2.open("circletest.txt",ios::out);
  f2 << "# Dimentions are for number of points NOT CUBES\n" << "# width 20\n"<<
"# height 20\n"<<
"# depth 20\n";
      for (int x = 0; x < width; x+=1){
        for (int y = 0; y < height; y+=1){
            for (int z = 0; z < depth; z+=1){
                f2 << points[x][y][z] << std::endl;
            }
        }
      }
      f2.close();
     // exit(0);
}


void Surface::marching_cube(){
    Cube cube;
    /*
    Iterate over the 3d matrix that holds the weight at each point
    */
    for(int i = 0; i < width-1; i++){
        for(int j = 0; j < height-1; j++){
            for(int k = 0; k < depth-1; k++){
                /*
                    Make a sample cube to analyze
                */
                cube.values[0] = points[i  ][j  ][k];     cube.verticies[0] = Point{i,  j , k};
                cube.values[1] = points[i+1][j  ][k];     cube.verticies[1] = Point{i+1,j,  k};
                cube.values[2] = points[i+1][j  ][k+1];   cube.verticies[2] = Point{i+1,j,  k+1};
                cube.values[3] = points[i  ][j  ][k+1];   cube.verticies[3] = Point{i,  j,  k+1};
                cube.values[4] = points[i  ][j+1][k];     cube.verticies[4] = Point{i , j+1,k};
                cube.values[5] = points[i+1][j+1][k];     cube.verticies[5] = Point{i+1,j+1,k};
                cube.values[6] = points[i+1][j+1][k+1];   cube.verticies[6] = Point{i+1,j+1,k+1};
                cube.values[7] = points[i  ][j+1][k+1];   cube.verticies[7] = Point{i,  j+1,k+1};   
                generate_triangles(cube);
            }
        }
    }
}

unsigned char Surface::get_index(double *vertValues){
  unsigned char index = 0;
  for(int i = 7; i >= 0; i--){
      vertValues[i] < 0 ? index = index << 1 : index = (index<<1)+1;
  }
  return index;
}

void Surface::generate_triangles(Cube cube){    
    std::vector<std::vector<int> > triangleTable= {
/*0*/ {},
/*1*/ {0, 3, 8},
/*2*/ {8, 7, 4},
/*3*/ {1, 3, 9, 3, 8, 9},
/*4*/ {9, 4, 5},
/*5*/ {9, 4, 5, 2, 11, 1},
/*6*/ {0, 4, 1, 4, 5, 1},
/*7*/ {1, 0, 10, 0, 10, 8, 10, 11, 8},
/*8*/ {1, 0, 9},
/*9*/ {2, 0, 10, 0, 9, 10},
/*10*/ {4, 8, 7, 10, 2, 5},
/*11*/ {2, 1, 11, 1, 11, 9, 11, 8, 9},
/*12*/ {3, 1, 11, 1, 10, 11},
/*13*/ {3, 2, 8, 2, 8, 10, 8, 9, 10},
/*14*/ {0, 3, 9, 3, 9, 11, 9, 10, 11},
/*15*/ {8, 9, 10, 8, 10, 11},
/*16*/ {9, 1, 0},
/*17*/ {5, 1, 4, 1, 0, 4},
/*18*/ {8, 7, 4, 1, 10, 0},
/*19*/ {1, 10, 0, 10, 0, 6, 0, 4, 6},
/*20*/ {9, 1, 0, 7, 11, 6},
/*21*/ {5, 1, 4, 1, 0, 4, 7, 11, 6},
/*22*/ {0, 4, 1, 4, 5, 1, 2, 11, 3},
/*23*/ {4, 7, 3, 4, 2, 11, 4, 2, 9, 2, 1, 9},
/*24*/ {1, 0, 9, 6, 7, 10},
/*25*/ {10, 2, 5, 2, 5, 3, 5, 7, 3},
/*26*/ {4, 7, 8, 0, 1, 9, 3, 2, 11},
/*27*/ {4, 7, 11, 4, 2, 11, 4, 2, 9, 2, 1, 9},
/*28*/ {3, 1, 11, 1, 10, 11, 7, 4, 8},
/*29*/ {8, 0, 2, 8, 10, 1, 8, 10, 7, 10, 6, 7},
/*30*/ {0, 3, 9, 3, 9, 11, 4, 7, 8, 9, 10, 11},
/*31*/ {7, 4, 11, 4, 11, 9, 11, 10, 9},
/*32*/ {4, 5, 9},
/*33*/ {0, 3, 8, 5, 6, 9},
/*34*/ {3, 7, 0, 7, 4, 0},
/*35*/ {2, 11, 1, 11, 1, 7, 1, 5, 7},
/*36*/ {7, 11, 6, 9, 1, 4},
/*37*/ {9, 5, 4, 8, 3, 0, 7, 11, 6},
/*38*/ {10, 5, 2, 5, 2, 4, 2, 0, 4},
/*39*/ {9, 5, 6, 9, 11, 6, 9, 11, 0, 11, 3, 0},
/*40*/ {4, 5, 9, 3, 2, 11},
/*41*/ {2, 0, 10, 0, 9, 10, 6, 7, 11},
/*42*/ {9, 10, 0, 10, 2, 0, 8, 7, 4},
/*43*/ {4, 5, 1, 4, 2, 10, 4, 2, 8, 2, 3, 8},
/*44*/ {9, 8, 5, 8, 7, 5, 10, 2, 1},
/*45*/ {4, 5, 8, 5, 8, 10, 0, 1, 9, 8, 11, 10},
/*46*/ {1, 2, 6, 1, 7, 11, 1, 7, 9, 7, 4, 9},
/*47*/ {4, 5, 8, 5, 8, 10, 8, 11, 10},
/*48*/ {7, 5, 8, 5, 9, 8},
/*49*/ {0, 9, 3, 9, 3, 5, 3, 7, 5},
/*50*/ {3, 8, 2, 8, 2, 4, 2, 6, 4},
/*51*/ {7, 5, 1, 7, 1, 3},
/*52*/ {10, 11, 1, 11, 3, 1, 9, 4, 5},
/*53*/ {7, 11, 4, 11, 4, 2, 5, 10, 6, 4, 0, 2},
/*54*/ {8, 7, 5, 8, 10, 6, 8, 10, 0, 10, 1, 0},
/*55*/ {7, 11, 4, 11, 4, 2, 4, 0, 2},
/*56*/ {7, 5, 8, 5, 9, 8, 3, 2, 11},
/*57*/ {8, 3, 1, 8, 10, 2, 8, 10, 4, 10, 5, 4},
/*58*/ {4, 8, 5, 8, 5, 3, 6, 11, 7, 5, 1, 3},
/*59*/ {4, 8, 5, 8, 5, 3, 5, 1, 3},
/*60*/ {8, 7, 9, 7, 9, 5, 3, 11, 1, 11, 1, 10},
/*61*/ {5, 7, 10, 7, 11, 10, 1, 0, 9},
/*62*/ {11, 10, 7, 10, 5, 7, 8, 0, 3},
/*63*/ {5, 7, 10, 7, 11, 10},
/*64*/ {5, 6, 10},
/*65*/ {0, 3, 8, 5, 6, 10},
/*66*/ {5, 6, 10, 0, 3, 9},
/*67*/ {1, 3, 9, 3, 8, 9, 5, 6, 10},
/*68*/ {1, 5, 2, 5, 6, 2},
/*69*/ {1, 5, 2, 5, 6, 2, 3, 8, 0},
/*70*/ {11, 6, 3, 6, 3, 5, 3, 1, 5},
/*71*/ {3, 2, 6, 3, 5, 10, 3, 5, 8, 5, 4, 8},
/*72*/ {10, 5, 6, 3, 8, 2},
/*73*/ {4, 0, 7, 0, 3, 7, 6, 10, 5},
/*74*/ {6, 5, 10, 2, 3, 11, 1, 0, 9},
/*75*/ {5, 6, 9, 6, 9, 11, 1, 2, 10, 9, 8, 11},
/*76*/ {5, 9, 6, 9, 6, 0, 6, 2, 0},
/*77*/ {0, 1, 5, 0, 6, 10, 0, 6, 8, 6, 7, 8},
/*78*/ {8, 3, 2, 8, 10, 2, 8, 10, 4, 10, 5, 4},
/*79*/ {5, 6, 9, 6, 9, 11, 9, 8, 11},
/*80*/ {6, 10, 5, 8, 0, 7},
/*81*/ {11, 8, 2, 8, 0, 2, 10, 5, 6},
/*82*/ {0, 1, 9, 4, 7, 8, 5, 6, 10},
/*83*/ {6, 10, 7, 10, 7, 1, 4, 9, 5, 7, 3, 1},
/*84*/ {8, 11, 4, 11, 6, 4, 9, 1, 0},
/*85*/ {0, 3, 4, 3, 4, 7, 1, 2, 5, 2, 5, 6},
/*86*/ {9, 1, 4, 1, 4, 2, 8, 3, 0, 4, 6, 2},
/*87*/ {7, 3, 6, 3, 2, 6, 5, 9, 4},
/*88*/ {2, 3, 11, 6, 5, 10, 7, 4, 8},
/*89*/ {10, 2, 5, 2, 5, 3, 9, 0, 1, 5, 7, 3},
/*90*/ {0, 3, 8, 1, 2, 10, 4, 5, 9, 6, 7, 11},
/*91*/ {11, 7, 6, 10, 1, 2, 5, 9, 4},
/*92*/ {5, 9, 6, 9, 6, 0, 7, 8, 4, 6, 2, 0},
/*93*/ {3, 7, 0, 7, 4, 0, 1, 10, 2},
/*94*/ {8, 3, 0, 9, 5, 4, 1, 10, 2},
/*95*/ {10, 2, 1, 4, 8, 5},
/*96*/ {4, 6, 9, 6, 10, 9},
/*97*/ {4, 6, 9, 6, 10, 9, 0, 3, 8},
/*98*/ {9, 4, 1, 4, 1, 7, 1, 3, 7},
/*99*/ {9, 5, 7, 9, 11, 6, 9, 11, 0, 11, 3, 0},
/*100*/ {8, 7, 0, 7, 0, 6, 0, 2, 6},
/*101*/ {8, 7, 0, 7, 0, 6, 9, 5, 4, 0, 2, 6},
/*102*/ {4, 0, 2, 4, 2, 6},
/*103*/ {8, 0, 7, 0, 7, 1, 7, 5, 1},
/*104*/ {2, 6, 3, 6, 7, 3, 0, 9, 1},
/*105*/ {4, 8, 6, 8, 6, 11, 9, 0, 10, 0, 10, 2},
/*106*/ {9, 4, 1, 4, 1, 7, 10, 6, 5, 1, 3, 7},
/*107*/ {6, 4, 11, 4, 8, 11, 2, 1, 10},
/*108*/ {9, 1, 3, 9, 11, 2, 9, 11, 4, 11, 7, 4},
/*109*/ {6, 2, 5, 2, 1, 5, 4, 8, 7},
/*110*/ {11, 3, 6, 3, 6, 0, 6, 4, 0},
/*111*/ {6, 2, 5, 2, 1, 5},
/*112*/ {6, 7, 10, 7, 10, 8, 10, 9, 8},
/*113*/ {0, 3, 7, 0, 6, 11, 0, 6, 9, 6, 5, 9},
/*114*/ {0, 1, 10, 0, 6, 10, 0, 6, 8, 6, 7, 8},
/*115*/ {6, 10, 7, 10, 7, 1, 7, 3, 1},
/*116*/ {9, 0, 2, 9, 11, 3, 9, 11, 5, 11, 6, 5},
/*117*/ {10, 9, 6, 9, 4, 6, 11, 3, 2},
/*118*/ {9, 1, 4, 1, 4, 2, 4, 6, 2},
/*119*/ {7, 3, 6, 3, 2, 6},
/*120*/ {1, 0, 10, 0, 10, 8, 5, 4, 9, 10, 11, 8},
/*121*/ {0, 2, 8, 2, 11, 8, 4, 5, 9},
/*122*/ {10, 1, 2, 11, 7, 6, 3, 8, 0},
/*123*/ {2, 1, 10, 7, 4, 11},
/*124*/ {8, 9, 3, 9, 1, 3, 11, 6, 7},
/*125*/ {8, 7, 4, 1, 10, 2},
/*126*/ {5, 9, 4, 11, 3, 6},
/*127*/ {10, 2, 1},
/*128*/ {10, 2, 1},
/*129*/ {5, 9, 4, 11, 3, 6},
/*130*/ {8, 7, 4, 1, 10, 2},
/*131*/ {8, 9, 3, 9, 1, 3, 11, 6, 7},
/*132*/ {2, 1, 10, 7, 4, 11},
/*133*/ {10, 1, 2, 11, 7, 6, 3, 8, 0},
/*134*/ {0, 2, 8, 2, 11, 8, 4, 5, 9},
/*135*/ {1, 0, 10, 0, 10, 8, 5, 4, 9, 10, 11, 8},
/*136*/ {7, 3, 6, 3, 2, 6},
/*137*/ {9, 1, 4, 1, 4, 2, 4, 6, 2},
/*138*/ {10, 9, 6, 9, 4, 6, 11, 3, 2},
/*139*/ {9, 0, 2, 9, 11, 3, 9, 11, 5, 11, 6, 5},
/*140*/ {6, 10, 7, 10, 7, 1, 7, 3, 1},
/*141*/ {0, 1, 10, 0, 6, 10, 0, 6, 8, 6, 7, 8},
/*142*/ {0, 3, 7, 0, 6, 11, 0, 6, 9, 6, 5, 9},
/*143*/ {6, 7, 10, 7, 10, 8, 10, 9, 8},
/*144*/ {6, 2, 5, 2, 1, 5},
/*145*/ {11, 3, 6, 3, 6, 0, 6, 4, 0},
/*146*/ {6, 2, 5, 2, 1, 5, 4, 8, 7},
/*147*/ {9, 1, 3, 9, 11, 2, 9, 11, 4, 11, 7, 4},
/*148*/ {6, 4, 11, 4, 8, 11, 2, 1, 10},
/*149*/ {9, 4, 1, 4, 1, 7, 10, 6, 5, 1, 3, 7},
/*150*/ {4, 8, 6, 8, 6, 11, 9, 0, 10, 0, 10, 2},
/*151*/ {2, 6, 3, 6, 7, 3, 0, 9, 1},
/*152*/ {8, 0, 7, 0, 7, 1, 7, 5, 1},
/*153*/ {4, 0, 2, 4, 2, 6},
/*154*/ {8, 7, 0, 7, 0, 6, 9, 5, 4, 0, 2, 6},
/*155*/ {8, 7, 0, 7, 0, 6, 0, 2, 6},
/*156*/ {9, 5, 7, 9, 11, 6, 9, 11, 0, 11, 3, 0},
/*157*/ {9, 4, 1, 4, 1, 7, 1, 3, 7},
/*158*/ {4, 6, 9, 6, 10, 9, 0, 3, 8},
/*159*/ {4, 6, 9, 6, 10, 9},
/*160*/ {10, 2, 1, 4, 8, 5},
/*161*/ {8, 3, 0, 9, 5, 4, 1, 10, 2},
/*162*/ {3, 7, 0, 7, 4, 0, 1, 10, 2},
/*163*/ {5, 9, 6, 9, 6, 0, 7, 8, 4, 6, 2, 0},
/*164*/ {11, 7, 6, 10, 1, 2, 5, 9, 4},
/*165*/ {0, 3, 8, 1, 2, 10, 4, 5, 9, 6, 7, 11},
/*166*/ {10, 2, 5, 2, 5, 3, 9, 0, 1, 5, 7, 3},
/*167*/ {2, 3, 11, 6, 5, 10, 7, 4, 8},
/*168*/ {7, 3, 6, 3, 2, 6, 5, 9, 4},
/*169*/ {9, 1, 4, 1, 4, 2, 8, 3, 0, 4, 6, 2},
/*170*/ {0, 3, 4, 3, 4, 7, 1, 2, 5, 2, 5, 6},
/*171*/ {8, 11, 4, 11, 6, 4, 9, 1, 0},
/*172*/ {6, 10, 7, 10, 7, 1, 4, 9, 5, 7, 3, 1},
/*173*/ {0, 1, 9, 4, 7, 8, 5, 6, 10},
/*174*/ {11, 8, 2, 8, 0, 2, 10, 5, 6},
/*175*/ {6, 10, 5, 8, 0, 7},
/*176*/ {5, 6, 9, 6, 9, 11, 9, 8, 11},
/*177*/ {8, 3, 2, 8, 10, 2, 8, 10, 4, 10, 5, 4},
/*178*/ {0, 1, 5, 0, 6, 10, 0, 6, 8, 6, 7, 8},
/*179*/ {5, 9, 6, 9, 6, 0, 6, 2, 0},
/*180*/ {5, 6, 9, 6, 9, 11, 1, 2, 10, 9, 8, 11},
/*181*/ {6, 5, 10, 2, 3, 11, 1, 0, 9},
/*182*/ {4, 0, 7, 0, 3, 7, 6, 10, 5},
/*183*/ {10, 5, 6, 3, 8, 2},
/*184*/ {3, 2, 6, 3, 5, 10, 3, 5, 8, 5, 4, 8},
/*185*/ {11, 6, 3, 6, 3, 5, 3, 1, 5},
/*186*/ {1, 5, 2, 5, 6, 2, 3, 8, 0},
/*187*/ {1, 5, 2, 5, 6, 2},
/*188*/ {1, 3, 9, 3, 8, 9, 5, 6, 10},
/*189*/ {5, 6, 10, 0, 3, 9},
/*190*/ {0, 3, 8, 5, 6, 10},
/*191*/ {5, 6, 10},
/*192*/ {5, 7, 10, 7, 11, 10},
/*193*/ {11, 10, 7, 10, 5, 7, 8, 0, 3},
/*194*/ {5, 7, 10, 7, 11, 10, 1, 0, 9},
/*195*/ {8, 7, 9, 7, 9, 5, 3, 11, 1, 11, 1, 10},
/*196*/ {4, 8, 5, 8, 5, 3, 5, 1, 3},
/*197*/ {4, 8, 5, 8, 5, 3, 6, 11, 7, 5, 1, 3},
/*198*/ {8, 3, 1, 8, 10, 2, 8, 10, 4, 10, 5, 4},
/*199*/ {7, 5, 8, 5, 9, 8, 3, 2, 11},
/*200*/ {7, 11, 4, 11, 4, 2, 4, 0, 2},
/*201*/ {8, 7, 5, 8, 10, 6, 8, 10, 0, 10, 1, 0},
/*202*/ {7, 11, 4, 11, 4, 2, 5, 10, 6, 4, 0, 2},
/*203*/ {10, 11, 1, 11, 3, 1, 9, 4, 5},
/*204*/ {7, 5, 1, 7, 1, 3},
/*205*/ {3, 8, 2, 8, 2, 4, 2, 6, 4},
/*206*/ {0, 9, 3, 9, 3, 5, 3, 7, 5},
/*207*/ {7, 5, 8, 5, 9, 8},
/*208*/ {4, 5, 8, 5, 8, 10, 8, 11, 10},
/*209*/ {1, 2, 6, 1, 7, 11, 1, 7, 9, 7, 4, 9},
/*210*/ {4, 5, 8, 5, 8, 10, 0, 1, 9, 8, 11, 10},
/*211*/ {9, 8, 5, 8, 7, 5, 10, 2, 1},
/*212*/ {4, 5, 1, 4, 2, 10, 4, 2, 8, 2, 3, 8},
/*213*/ {9, 10, 0, 10, 2, 0, 8, 7, 4},
/*214*/ {2, 0, 10, 0, 9, 10, 6, 7, 11},
/*215*/ {4, 5, 9, 3, 2, 11},
/*216*/ {9, 5, 6, 9, 11, 6, 9, 11, 0, 11, 3, 0},
/*217*/ {10, 5, 2, 5, 2, 4, 2, 0, 4},
/*218*/ {9, 5, 4, 8, 3, 0, 7, 11, 6},
/*219*/ {7, 11, 6, 9, 1, 4},
/*220*/ {2, 11, 1, 11, 1, 7, 1, 5, 7},
/*221*/ {3, 7, 0, 7, 4, 0},
/*222*/ {0, 3, 8, 5, 6, 9},
/*223*/ {4, 5, 9},
/*224*/ {7, 4, 11, 4, 11, 9, 11, 10, 9},
/*225*/ {0, 3, 9, 3, 9, 11, 4, 7, 8, 9, 10, 11},
/*226*/ {8, 0, 2, 8, 10, 1, 8, 10, 7, 10, 6, 7},
/*227*/ {3, 1, 11, 1, 10, 11, 7, 4, 8},
/*228*/ {4, 7, 11, 4, 2, 11, 4, 2, 9, 2, 1, 9},
/*229*/ {4, 7, 8, 0, 1, 9, 3, 2, 11},
/*230*/ {10, 2, 5, 2, 5, 3, 5, 7, 3},
/*231*/ {1, 0, 9, 6, 7, 10},
/*232*/ {4, 7, 3, 4, 2, 11, 4, 2, 9, 2, 1, 9},
/*233*/ {0, 4, 1, 4, 5, 1, 2, 11, 3},
/*234*/ {5, 1, 4, 1, 0, 4, 7, 11, 6},
/*235*/ {9, 1, 0, 7, 11, 6},
/*236*/ {1, 10, 0, 10, 0, 6, 0, 4, 6},
/*237*/ {8, 7, 4, 1, 10, 0},
/*238*/ {5, 1, 4, 1, 0, 4},
/*239*/ {9, 1, 0},
/*240*/ {8, 9, 10, 8, 10, 11},
/*241*/ {0, 3, 9, 3, 9, 11, 9, 10, 11},
/*242*/ {3, 2, 8, 2, 8, 10, 8, 9, 10},
/*243*/ {3, 1, 11, 1, 10, 11},
/*244*/ {2, 1, 11, 1, 11, 9, 11, 8, 9},
/*245*/ {4, 8, 7, 10, 2, 5},
/*246*/ {2, 0, 10, 0, 9, 10},
/*247*/ {1, 0, 9},
/*248*/ {1, 0, 10, 0, 10, 8, 10, 11, 8},
/*249*/ {0, 4, 1, 4, 5, 1},
/*250*/ {9, 4, 5, 2, 11, 1},
/*251*/ {9, 4, 5},
/*252*/ {1, 3, 9, 3, 8, 9},
/*253*/ {8, 7, 4},
/*254*/ {0, 3, 8},
/*255*/ {},
};
   
    unsigned char index; // holds the case of the cube
    
    // get the index of of the cube from a look up table
    index = get_index(cube.values);
    if(index == 0 ) { return;} 
        
    Point edgePoints[12];
    int edgeList = edgeTable[index];
    for(int i = 0; i < 12; i++){
        std::pair<int,int> edge2Verts = edgeToVertex(edgeList&(1<<i));
        if(edge2Verts.first == -1){continue;}
        edgePoints[i] = interpolate(cube.verticies[edge2Verts.first],cube.verticies[edge2Verts.second],cube.values[edge2Verts.first],cube.values[edge2Verts.second]);
    }

    for(int edge = 0; edge < triangleTable[index].size(); edge+=3){
        Triangle t;
        t.p[0] = edgePoints[triangleTable[index][edge]];
        t.p[1] = edgePoints[triangleTable[index][edge+1]];
        t.p[2] = edgePoints[triangleTable[index][edge+2]];
        triangles.push_back(t);
    }

}
void Surface::render_surface(){
  for(int i = 0; i < triangles.size(); i++){
    glColor3f(0.560784   ,0.560784   ,0.737255);
    glBegin(GL_TRIANGLES);
    glVertex3f(triangles[i].p[0].x,triangles[i].p[0].y,triangles[i].p[0].z);
    glVertex3f(triangles[i].p[1].x,triangles[i].p[1].y,triangles[i].p[1].z);
    glVertex3f(triangles[i].p[2].x,triangles[i].p[2].y,triangles[i].p[2].z);
    glEnd();

    glColor3f(1, 0, 0.25);
    glBegin(GL_LINES);
    glVertex3f(triangles[i].p[0].x,triangles[i].p[0].y,triangles[i].p[0].z);
    glVertex3f(triangles[i].p[1].x,triangles[i].p[1].y,triangles[i].p[1].z);

    glVertex3f(triangles[i].p[1].x,triangles[i].p[1].y,triangles[i].p[1].z);
    glVertex3f(triangles[i].p[2].x,triangles[i].p[2].y,triangles[i].p[2].z);

    glVertex3f(triangles[i].p[0].x,triangles[i].p[0].y,triangles[i].p[0].z);
    glVertex3f(triangles[i].p[2].x,triangles[i].p[2].y,triangles[i].p[2].z);
    glEnd();

  }
}